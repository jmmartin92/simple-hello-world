apiVersion: v1
kind: Service
metadata:
  name: simple-hw-service
  namespace: ns-simple-hw
  labels:
    app.kubernetes.io/name: simple-hw
    app.kubernetes.io/version: "0.1"
    app.kubernetes.io/instance: simple-hw
spec:
  ports:
  - name: http
    port: 8000
    protocol: TCP
    targetPort: 8000
    nodePort: 30000
  selector:
    app.kubernetes.io/name: simple-hw
    app.kubernetes.io/version: "0.1"
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: simple-hw-deploy
  namespace: ns-simple-hw
  labels:
    app.kubernetes.io/name: simple-hw
    app.kubernetes.io/version: "0.1"
spec:
  replicas: 2
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: simple-hw
      app.kubernetes.io/version: "0.1"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: simple-hw
        app.kubernetes.io/version: "0.1"
    spec:
      containers:
      - name: simple-hw
        image: hello-world-app:1.0.0
        imagePullPolicy: IfNotPresent       # Should use Always if using registry
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /
            port: 8000
            scheme: HTTP
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 250m
            memory: 500Mi
          requests:
            cpu: 125m
            memory: 250Mi
      automountServiceAccountToken: false
      serviceAccount: simple-hw-sa
      # Below can be used if deploying to a cluster of > 1 node
      # affinity:
      #   podAntiAffinity:
      #     preferredDuringSchedulingIgnoredDuringExecution:
      #     - weight: 100
      #       podAffinityTerm:
      #         labelSelector:
      #           matchExpressions:
      #           - {key: app.kubernetes.io/name, operator: In, values: [simple-hw]}
      #           - {key: version, operator: In, values: ["0.1"]}
      #         topologyKey: "kubernetes.io/hostname"
---
# could have used config map for port, and used environment variables in node server 
---
 # could put quota on namespace
# Could put in an hpa
# only 2 replicas asked for though
---
